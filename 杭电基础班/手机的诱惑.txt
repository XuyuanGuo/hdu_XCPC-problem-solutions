#include<iostream>
#include<string.h>
using namespace std;

bool flag;
int n,m,t,di,dj,mov[4][2]={{-1,0},{0,1},{0,-1},{1,0}};
char map[7][7];
void dfs(int i0,int j0,int step);

int main(){
    int si,sj;
    while(cin>>n>>m>>t){
        if(n==0&&m==0&&t==0) break;
        int wall=0;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                cin>>map[i][j];
                if(map[i][j]=='S'){
                    si=i;   sj=j;
                }
                if(map[i][j]=='D'){
                    di=i;   dj=j;
                }
                if(map[i][j]=='X') wall++;
            }
        }
        if(n*m-wall<=t||(t-(di-si)-(dj-sj))%2==1){
            cout<<"NO"<<endl;
            continue;
        }
        flag=0; map[si][sj]='X';
        dfs(si,sj,0);
        if(flag==1) cout<<"YES"<<endl;
        else cout<<"NO"<<endl;
    }
    return 0;
}

void dfs(int i0,int j0,int step){
    if(step==t&&i0==di&&j0==dj) flag=1;
    if(flag==1) return;
    for(int i=0;i<4;i++){
        if(i0+mov[i][0]>=1&&i0+mov[i][0]<=n&&j0+mov[i][1]>=1&&j0+mov[i][1]<=m){
            if(map[i0+mov[i][0]][j0+mov[i][1]]!='X'){
                map[i0+mov[i][0]][j0+mov[i][1]]='X';
                dfs(i0+mov[i][0],j0+mov[i][1],step+1);
                map[i0+mov[i][0]][j0+mov[i][1]]='.';
            }
        }
    }
    return;
}