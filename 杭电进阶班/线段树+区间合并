#include<bits/stdc++.h>
using namespace std;
#define MAX 100001

int a[MAX];

struct segmentTree{
    int max,lm,rm;
}segtree[MAX<<2];

void pushup(int rt,int l,int r){
    int m=(l+r)/2;
    if(a[m]>=a[m+1]){
        segtree[rt].max=max(segtree[rt<<1].max,segtree[rt<<1|1].max);
        segtree[rt].lm=segtree[rt<<1].lm;
        segtree[rt].rm=segtree[rt<<1|1].rm;
    }else{
        int temp=segtree[rt<<1].rm+segtree[rt<<1|1].lm;
        segtree[rt].max=max(max(segtree[rt<<1].max,segtree[rt<<1|1].max),temp);
        if(segtree[rt<<1].lm==m-l+1) segtree[rt].lm=segtree[rt<<1].lm+segtree[rt<<1|1].lm;
        else segtree[rt].lm=segtree[rt<<1].lm;
        if(segtree[rt<<1|1].rm==r-m) segtree[rt].rm=segtree[rt<<1].rm+segtree[rt<<1|1].rm;
        else segtree[rt].rm=segtree[rt<<1|1].rm;
    }
}

void update(int L,int l,int r,int rt){
    if(l==L&&r==L) return;
    else{
        int m=(l+r)/2;
        if(L<=m) update(L,l,m,rt<<1);
        if(L>m) update(L,m+1,r,rt<<1|1);
        pushup(rt,l,r);
    }
}

void build(int l,int r,int rt){
    if(l==r){
        segtree[rt].max=1;
        segtree[rt].lm=1;
        segtree[rt].rm=1;
    }
    else{
        int m=(l+r)/2;
        build(l,m,rt<<1);
        build(m+1,r,rt<<1|1);
        pushup(rt,l,r);
    }
}

int quire(int L,int R,int l,int r,int rt){
    if(l>=L&&r<=R) return segtree[rt].max;
    if(r<L||l>R) return 0;
    int m=(l+r)/2;
    if(a[m]>=a[m+1]) return max(quire(L,R,l,m,rt<<1),quire(L,R,m+1,r,rt<<1|1));
    else return max(max(quire(L,R,l,m,rt<<1),quire(L,R,m+1,r,rt<<1|1)),min(segtree[rt<<1].rm,m-L+1)+min(segtree[rt<<1|1].lm,R-m));
}

int main(){
    int t,n,m,A,B;
    char c[2];
    scanf("%d",&t);
    while(t--){
        memset(segtree,0,sizeof(segtree));
        scanf("%d%d",&n,&m);
        for(int i=1;i<=n;i++){
            scanf("%d",&a[i]);
        }
        build(1,n,1);
        while(m--){
            scanf("%s%d%d",c,&A,&B);
            if(c[0]=='U'){
                a[A+1]=B;
                update(A+1,1,n,1);
            }
            else printf("%d\n",quire(A+1,B+1,1,n,1));
        }
    }
    return 0;
}